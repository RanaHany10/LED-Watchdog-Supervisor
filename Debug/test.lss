
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002f4  00000388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000388  2**0
                  ALLOC
  3 .stab         000017f4  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001044  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002bf0  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000037c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
// bits for PORTB
#define WDG_RESET_TEST_PIN 1 // Test pin

int main()
{
	LEDM_Init();
  90:	0e 94 2f 01 	call	0x25e	; 0x25e <LEDM_Init>

	PORTB_ADDRESS |= (1 << WDG_RESET_TEST_PIN); // Set data to the pin
  94:	29 9a       	sbi	0x05, 1	; 5
	// Test pin
//	_delay_ms(400);
//	PORTB_ADDRESS &= ~(0x1 << WDG_RESET_TEST_PIN); // Clear the pin

	// Initialize components
	WDGM_Init();
  96:	0e 94 65 00 	call	0xca	; 0xca <WDGM_Init>
	TIMER_Init();
  9a:	0e 94 b6 00 	call	0x16c	; 0x16c <TIMER_Init>
	WDGDrv_Init();
  9e:	0e 94 a7 00 	call	0x14e	; 0x14e <WDGDrv_Init>

	// main loop
	while (1)
	{
		// Called every 10ms
		LEDM_Manage();
  a2:	0e 94 39 01 	call	0x272	; 0x272 <LEDM_Manage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	83 ec       	ldi	r24, 0xC3	; 195
  a8:	99 e0       	ldi	r25, 0x09	; 9
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x1a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x20>
  b0:	00 00       	nop
		// Standard delay function to manage timing
		_delay_ms(10);
		// Increment counter every 10ms
		WDGM_CallTimer += 10;
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b6:	86 5f       	subi	r24, 0xF6	; 246
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (WDGM_CallTimer == 20)
  bc:	84 31       	cpi	r24, 0x14	; 20
  be:	89 f7       	brne	.-30     	; 0xa2 <main+0x12>
		{
			// Called every 20ms
			WDGM_MainFunction();
  c0:	0e 94 73 00 	call	0xe6	; 0xe6 <WDGM_MainFunction>
			// Reset counter after 20ms
			WDGM_CallTimer = 0;
  c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  c8:	ec cf       	rjmp	.-40     	; 0xa2 <main+0x12>

000000ca <WDGM_Init>:
#define WDG_WDGM_TEST_PIN 4 // Test pin

void WDGM_Init()
{
	// Counter to keep track of 100ms periods
	WDGTimer = 0;
  ca:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <WDGTimer+0x1>
  ce:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <WDGTimer>
	// Initialize WDGM_MainFunction call counter
	WDGMCallCount = 0;
  d2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <WDGMCallCount+0x1>
  d6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <WDGMCallCount>
	// Initialize call counter
	alivenessCounter = 0;
  da:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <alivenessCounter>
	WDGStatus = NOK;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <WDGStatus>
}
  e4:	08 95       	ret

000000e6 <WDGM_MainFunction>:

void WDGM_MainFunction()
{
	// Toggle the test pin
	PORTB_ADDRESS ^= (1 << WDG_WDGM_TEST_PIN);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	90 e1       	ldi	r25, 0x10	; 16
  ea:	89 27       	eor	r24, r25
  ec:	85 b9       	out	0x05, r24	; 5

	// Increment by 20ms (this function is called every 20ms)
	WDGTimer += 20;
  ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <WDGTimer>
  f2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <WDGTimer+0x1>
  f6:	44 96       	adiw	r24, 0x14	; 20
  f8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <WDGTimer+0x1>
  fc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <WDGTimer>

	if (WDGTimer >= 100)
 100:	84 36       	cpi	r24, 0x64	; 100
 102:	91 05       	cpc	r25, r1
 104:	68 f0       	brcs	.+26     	; 0x120 <WDGM_MainFunction+0x3a>
	{
		// Check the number of calls within 100ms period
		if (alivenessCounter >= 8 && alivenessCounter <= 12)
 106:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alivenessCounter>
 10a:	88 50       	subi	r24, 0x08	; 8
 10c:	85 30       	cpi	r24, 0x05	; 5
 10e:	90 f4       	brcc	.+36     	; 0x134 <WDGM_MainFunction+0x4e>
		{
			WDGStatus = OK;
 110:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <WDGStatus>
		else
		{
			WDGStatus = NOK;
		}
		// Reset LEDM_Manage call counter
		alivenessCounter = 0;
 114:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <alivenessCounter>
		// Reset timer for the next 100ms period
		WDGTimer = 0;
 118:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <WDGTimer+0x1>
 11c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <WDGTimer>
	}
	// Update the watchdog call counter to indicate this function is not stuck
	WDGMCallCount++;
 120:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <WDGMCallCount>
 124:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <WDGMCallCount+0x1>
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <WDGMCallCount+0x1>
 12e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <WDGMCallCount>
}
 132:	08 95       	ret
		{
			WDGStatus = OK;
		}
		else
		{
			WDGStatus = NOK;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <WDGStatus>
 13a:	ec cf       	rjmp	.-40     	; 0x114 <WDGM_MainFunction+0x2e>

0000013c <WDGM_PovideSuppervisionStatus>:
}

WDGM_StatusType WDGM_PovideSuppervisionStatus()
{
	return WDGStatus;
}
 13c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <WDGStatus>
 140:	08 95       	ret

00000142 <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication()
{
	alivenessCounter++;
 142:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alivenessCounter>
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <alivenessCounter>
}
 14c:	08 95       	ret

0000014e <WDGDrv_Init>:
#define WDG_REFRESH_TEST_PIN 2 // Test pin

void WDGDrv_Init()
{
    // Disable global interrupts
    SREG_ADDRESS &= ~(1 << SREG_I_BIT);
 14e:	8f b7       	in	r24, 0x3f	; 63
 150:	8f 77       	andi	r24, 0x7F	; 127
 152:	8f bf       	out	0x3f, r24	; 63

    // Reset Watchdog Timer
    wdt_reset();
 154:	a8 95       	wdr
    // Start timed sequence */
    WDTCSR_ADDRESS |= (1 << WDCE_BIT) | (1 << WDE_BIT);
 156:	e0 e6       	ldi	r30, 0x60	; 96
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 61       	ori	r24, 0x18	; 24
 15e:	80 83       	st	Z, r24
    // Set new prescaler(time-out) value = 8K cycles (~64ms), enable interrupts using  | (1<<WDIE)
    WDTCSR_ADDRESS = (1 << WDE_BIT) | (1 << WDP1_BIT) | (1 << WDIE_BIT);
 160:	8a e4       	ldi	r24, 0x4A	; 74
 162:	80 83       	st	Z, r24

    // Enable global interrupts
    SREG_ADDRESS |= (1 << SREG_I_BIT);
 164:	8f b7       	in	r24, 0x3f	; 63
 166:	80 68       	ori	r24, 0x80	; 128
 168:	8f bf       	out	0x3f, r24	; 63
}
 16a:	08 95       	ret

0000016c <TIMER_Init>:
extern int WDGMCallCount;

void TIMER_Init()
{
    // Disable global interrupts
    SREG_ADDRESS &= ~(1 << SREG_I_BIT);
 16c:	8f b7       	in	r24, 0x3f	; 63
 16e:	8f 77       	andi	r24, 0x7F	; 127
 170:	8f bf       	out	0x3f, r24	; 63
    // CTC mode by setting the WGM12 bit in the TCCR1B register, prescaler 64
    TCCR1B_ADDRESS |= (1 << WGM12_BIT);
 172:	e1 e8       	ldi	r30, 0x81	; 129
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	80 83       	st	Z, r24
    TCCR1B_ADDRESS |= (1 << CS11) | (1 << CS10);
 17c:	80 81       	ld	r24, Z
 17e:	83 60       	ori	r24, 0x03	; 3
 180:	80 83       	st	Z, r24
    // Calculation for 50ms interval (1MHz * 0.05 / 64 - 1= 780ms)
    // Set compare value for 50ms interval  51.2MS for 800, 50.9ms for 795
    OCR1A_ADDRESS = 780;
 182:	8c e0       	ldi	r24, 0x0C	; 12
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 18a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    // Enable compare interrupt
    TIMSK1_ADDRESS = (1 << OCIE1A_BIT);
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    // Enable global interrupts
    SREG_ADDRESS |= (1 << SREG_I_BIT);
 194:	8f b7       	in	r24, 0x3f	; 63
 196:	80 68       	ori	r24, 0x80	; 128
 198:	8f bf       	out	0x3f, r24	; 63
}
 19a:	08 95       	ret

0000019c <__vector_11>:

// Timer1 Compare Match A ISR
ISR(TIMER1_COMPA_vect)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
    // Increment the counter
    counter++;
 1be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter>
 1c2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <counter+0x1>
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <counter+0x1>
 1cc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter>

    if (counter == 1)
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	91 05       	cpc	r25, r1
 1d4:	99 f0       	breq	.+38     	; 0x1fc <__vector_11+0x60>
            GPIO_Write(WDG_REFRESH_TEST_PIN, 0);

            WDGMCallCount = 0;
        }
    }
    else if (counter == 2)
 1d6:	02 97       	sbiw	r24, 0x02	; 2
 1d8:	29 f1       	breq	.+74     	; 0x224 <__vector_11+0x88>
            WDGMCallCount = 0;
        }
        // Reset the counter after it reaches 2
        counter = 0;
    }
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti
    counter++;

    if (counter == 1)
    {
        // This block will be executed after the first 50ms
        if (WDGMCallCount >= 2)
 1fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <WDGMCallCount>
 200:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <WDGMCallCount+0x1>
 204:	02 97       	sbiw	r24, 0x02	; 2
 206:	4c f3       	brlt	.-46     	; 0x1da <__vector_11+0x3e>
        {
            // Set test pin to high
            GPIO_Write(WDG_REFRESH_TEST_PIN, 1);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_Write>

            // Refresh the watchdog
            wdt_reset();
 210:	a8 95       	wdr

            // Set test pin to low
            GPIO_Write(WDG_REFRESH_TEST_PIN, 0);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_Write>

            WDGMCallCount = 0;
 21a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <WDGMCallCount+0x1>
 21e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <WDGMCallCount>
 222:	db cf       	rjmp	.-74     	; 0x1da <__vector_11+0x3e>
        }
    }
    else if (counter == 2)
    {
        // This block will be executed after the next 50ms (or 100ms from the start)
        if ((WDGMCallCount >= 2) && (WDGM_PovideSuppervisionStatus() == OK))
 224:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <WDGMCallCount>
 228:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <WDGMCallCount+0x1>
 22c:	02 97       	sbiw	r24, 0x02	; 2
 22e:	2c f4       	brge	.+10     	; 0x23a <__vector_11+0x9e>
            GPIO_Write(WDG_REFRESH_TEST_PIN, 0);
            
            WDGMCallCount = 0;
        }
        // Reset the counter after it reaches 2
        counter = 0;
 230:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <counter+0x1>
 234:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter>
    }
}
 238:	d0 cf       	rjmp	.-96     	; 0x1da <__vector_11+0x3e>
        }
    }
    else if (counter == 2)
    {
        // This block will be executed after the next 50ms (or 100ms from the start)
        if ((WDGMCallCount >= 2) && (WDGM_PovideSuppervisionStatus() == OK))
 23a:	0e 94 9e 00 	call	0x13c	; 0x13c <WDGM_PovideSuppervisionStatus>
 23e:	81 11       	cpse	r24, r1
 240:	f7 cf       	rjmp	.-18     	; 0x230 <__vector_11+0x94>
        {
            // Set test pin to high
            GPIO_Write(WDG_REFRESH_TEST_PIN, 1);
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_Write>
            // Refresh the watchdog
            wdt_reset();
 24a:	a8 95       	wdr
            // Set test pin to low
            GPIO_Write(WDG_REFRESH_TEST_PIN, 0);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_Write>
            
            WDGMCallCount = 0;
 254:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <WDGMCallCount+0x1>
 258:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <WDGMCallCount>
 25c:	e9 cf       	rjmp	.-46     	; 0x230 <__vector_11+0x94>

0000025e <LEDM_Init>:
static unsigned char LEDState; // 0 for off, 1 for on

void LEDM_Init(void)
{
    // Initialize led state and counter
    LEDTimer = 0; // Reset timer
 25e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <LEDTimer+0x1>
 262:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <LEDTimer>
    LEDState = 1; // Start with LED on
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <LEDState>
    GPIO_Init();
 26c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_Init>
}
 270:	08 95       	ret

00000272 <LEDM_Manage>:

void LEDM_Manage(void)
{
    // Toggle the test pin
    PORTB_ADDRESS ^= (1 << WDG_LEDM_TEST_PIN);
 272:	85 b1       	in	r24, 0x05	; 5
 274:	98 e0       	ldi	r25, 0x08	; 8
 276:	89 27       	eor	r24, r25
 278:	85 b9       	out	0x05, r24	; 5
    // Increment timer by 10ms
    LEDTimer += 10;
 27a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <LEDTimer>
 27e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <LEDTimer+0x1>
 282:	0a 96       	adiw	r24, 0x0a	; 10
 284:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <LEDTimer+0x1>
 288:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <LEDTimer>
    // Check if 500ms has passed
    if (LEDTimer >= 500)
 28c:	84 3f       	cpi	r24, 0xF4	; 244
 28e:	91 40       	sbci	r25, 0x01	; 1
 290:	18 f4       	brcc	.+6      	; 0x298 <LEDM_Manage+0x26>
        GPIO_Write(PORTB0_BIT, LEDState);
        // Reset timer
        LEDTimer = 0;
    }
    // Indicate aliveness
    WDGM_AlivenessIndication();
 292:	0e 94 a1 00 	call	0x142	; 0x142 <WDGM_AlivenessIndication>
}
 296:	08 95       	ret
    LEDTimer += 10;
    // Check if 500ms has passed
    if (LEDTimer >= 500)
    {
        // Toggle LED state
        LEDState = !LEDState;
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <LEDState>
 29e:	81 11       	cpse	r24, r1
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <LEDState>
        // Write LED state
        GPIO_Write(PORTB0_BIT, LEDState);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_Write>
        // Reset timer
        LEDTimer = 0;
 2ac:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <LEDTimer+0x1>
 2b0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <LEDTimer>
 2b4:	ee cf       	rjmp	.-36     	; 0x292 <LEDM_Manage+0x20>

000002b6 <GPIO_Init>:
#define PORTB0_BIT 0 // LED pin

void GPIO_Init(void)
{
    // Initialize the GPIO pin for the LED
    DDRB_ADDRESS |= (1 << DDB0_BIT);    // Set PORTB0 as output
 2b6:	20 9a       	sbi	0x04, 0	; 4
    DDRB_ADDRESS |= (1 << DDB1_BIT);    // Set PORTB0 as output
 2b8:	21 9a       	sbi	0x04, 1	; 4
    DDRB_ADDRESS |= (1 << DDB2_BIT);    // Set PORTB0 as output
 2ba:	22 9a       	sbi	0x04, 2	; 4
    DDRB_ADDRESS |= (1 << DDB3_BIT);    // Set PORTB0 as output
 2bc:	23 9a       	sbi	0x04, 3	; 4
    DDRB_ADDRESS |= (1 << DDB4_BIT);    // Set PORTB0 as output
 2be:	24 9a       	sbi	0x04, 4	; 4
    // Set the LED pin
    PORTB_ADDRESS |= (1 << PORTB0_BIT);
 2c0:	28 9a       	sbi	0x05, 0	; 5
}
 2c2:	08 95       	ret

000002c4 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{
    // Configure the pin on port B
    PORTB_ADDRESS &= ~(0x1 << PinId);    // Clear the pin
 2c4:	95 b1       	in	r25, 0x05	; 5
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	08 2e       	mov	r0, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <GPIO_Write+0xe>
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <GPIO_Write+0xa>
 2d6:	20 95       	com	r18
 2d8:	29 23       	and	r18, r25
 2da:	25 b9       	out	0x05, r18	; 5
    PORTB_ADDRESS |= (PinData << PinId); // Set data to the pin
 2dc:	95 b1       	in	r25, 0x05	; 5
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <GPIO_Write+0x22>
 2e2:	66 0f       	add	r22, r22
 2e4:	77 1f       	adc	r23, r23
 2e6:	8a 95       	dec	r24
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <GPIO_Write+0x1e>
 2ea:	69 2b       	or	r22, r25
 2ec:	65 b9       	out	0x05, r22	; 5
}
 2ee:	08 95       	ret

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
